// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sc.Models;

#nullable disable

namespace Sc.Models.Migrations
{
    [DbContext(typeof(ScDbContext))]
    [Migration("20241022073619_V1.0.1")]
    partial class V101
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("administrateduserid");

                    b.Property<string>("AdministratedUsername")
                        .HasColumnType("text")
                        .HasColumnName("administratedusername");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("DeclinedNote")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("declinednote");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finishdate");

                    b.Property<string>("JsonSignUpDto")
                        .HasColumnType("text")
                        .HasColumnName("jsonsignupdto");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("approveregistration");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("approveregistrationfile");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("administrateduserid");

                    b.Property<string>("AdministratedUsername")
                        .HasColumnType("text")
                        .HasColumnName("administratedusername");

                    b.Property<int>("ApproveRegistrationId")
                        .HasColumnType("integer")
                        .HasColumnName("approveregistrationid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("DeclinedNote")
                        .HasColumnType("text")
                        .HasColumnName("declinednote");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finishdate");

                    b.Property<string>("JsonSignUpDto")
                        .HasColumnType("text")
                        .HasColumnName("jsonsignupdto");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("ApproveRegistrationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("approveregistrationhistory");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistoryFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("approveregistrationhistoryfile");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address");

                    b.Property<string>("AddressAlt")
                        .HasColumnType("text")
                        .HasColumnName("addressalt");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsRegistryAgency")
                        .HasColumnType("boolean")
                        .HasColumnName("isregistryagency");

                    b.Property<int>("LawFormId")
                        .HasColumnType("integer")
                        .HasColumnName("lawformid");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Uic")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("uic");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LawFormId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("Uic")
                        .IsUnique();

                    b.ToTable("company");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.CompanyAdditional", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<decimal>("AnnualTurnover")
                        .HasColumnType("numeric")
                        .HasColumnName("annualturnover");

                    b.Property<long>("StaffCount")
                        .HasColumnType("bigint")
                        .HasColumnName("staffcount");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.Property<string>("WebPage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("webpage");

                    b.HasKey("Id");

                    b.ToTable("companyadditional");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.CompanyRepresentative", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("companyrepresentative");
                });

            modelBuilder.Entity("Sc.Models.Entities.Emails.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sentdate");

                    b.Property<DateTime?>("StartSendingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startsendingdate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("email");
                });

            modelBuilder.Entity("Sc.Models.Entities.Emails.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("BodyTemplate")
                        .HasColumnType("text")
                        .HasColumnName("bodytemplate");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SubjectTemplate")
                        .HasColumnType("text")
                        .HasColumnName("subjecttemplate");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("emailtemplate");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Complexes.Complex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AddressAlt")
                        .HasColumnType("text")
                        .HasColumnName("addressalt");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<int?>("AreaOfActivity")
                        .HasColumnType("integer")
                        .HasColumnName("areaofactivity");

                    b.Property<string>("Benefits")
                        .HasColumnType("text")
                        .HasColumnName("benefits");

                    b.Property<string>("BenefitsAlt")
                        .HasColumnType("text")
                        .HasColumnName("benefitsalt");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("CategoryAlt")
                        .HasColumnType("text")
                        .HasColumnName("categoryalt");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CoordinatorPosition")
                        .HasColumnType("text")
                        .HasColumnName("coordinatorposition");

                    b.Property<string>("CoordinatorPositionAlt")
                        .HasColumnType("text")
                        .HasColumnName("coordinatorpositionalt");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datefrom");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateto");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EuropeanInfrastructure")
                        .HasColumnType("text")
                        .HasColumnName("europeaninfrastructure");

                    b.Property<string>("Fax")
                        .HasColumnType("text")
                        .HasColumnName("fax");

                    b.Property<string>("ForeignSettlement")
                        .HasColumnType("text")
                        .HasColumnName("foreignsettlement");

                    b.Property<string>("ForeignSettlementAlt")
                        .HasColumnType("text")
                        .HasColumnName("foreignsettlementalt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsForeign")
                        .HasColumnType("boolean")
                        .HasColumnName("isforeign");

                    b.Property<int>("LotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lotnumber");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("postcode");

                    b.Property<string>("ScientificTeam")
                        .HasColumnType("text")
                        .HasColumnName("scientificteam");

                    b.Property<string>("ScientificTeamAlt")
                        .HasColumnType("text")
                        .HasColumnName("scientificteamalt");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.Property<string>("WebPageUrl")
                        .HasColumnType("text")
                        .HasColumnName("webpageurl");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("SettlementId");

                    b.ToTable("complex");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Complexes.ComplexOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplexId")
                        .HasColumnType("integer")
                        .HasColumnName("complexid");

                    b.Property<int?>("FinancingOrganizationLotId")
                        .HasColumnType("integer")
                        .HasColumnName("financingorganizationlotid");

                    b.Property<string>("FinancingOrganizationName")
                        .HasColumnType("text")
                        .HasColumnName("financingorganizationname");

                    b.Property<string>("FinancingOrganizationNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("financingorganizationnamealt");

                    b.Property<string>("FinancingOrganizationShortName")
                        .HasColumnType("text")
                        .HasColumnName("financingorganizationshortname");

                    b.Property<string>("FinancingOrganizationShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("financingorganizationshortnamealt");

                    b.Property<string>("NameRND")
                        .HasColumnType("text")
                        .HasColumnName("namernd");

                    b.Property<string>("NameRNDAlt")
                        .HasColumnType("text")
                        .HasColumnName("namerndalt");

                    b.Property<int?>("OrganizationLotId")
                        .HasColumnType("integer")
                        .HasColumnName("organizationlotid");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text")
                        .HasColumnName("organizationname");

                    b.Property<string>("OrganizationNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("organizationnamealt");

                    b.Property<string>("OrganizationShortName")
                        .HasColumnType("text")
                        .HasColumnName("organizationshortname");

                    b.Property<string>("OrganizationShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("organizationshortnamealt");

                    b.Property<int?>("OrganizationTypeEnum")
                        .HasColumnType("integer")
                        .HasColumnName("organizationtypeenum");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.ToTable("complexorganization");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Institutions.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AddressAlt")
                        .HasColumnType("text")
                        .HasColumnName("addressalt");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsResearchUniversity")
                        .HasColumnType("boolean")
                        .HasColumnName("isresearchuniversity");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("LotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lotnumber");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int?>("OrganizationType")
                        .HasColumnType("integer")
                        .HasColumnName("organizationtype");

                    b.Property<int?>("OwnershipType")
                        .HasColumnType("integer")
                        .HasColumnName("ownershiptype");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int?>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int?>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.Property<string>("ShortNameAlt")
                        .HasColumnType("text")
                        .HasColumnName("shortnamealt");

                    b.Property<string>("Uic")
                        .HasColumnType("text")
                        .HasColumnName("uic");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.Property<string>("WebPageUrl")
                        .HasColumnType("text")
                        .HasColumnName("webpageurl");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.HasIndex("SettlementId");

                    b.ToTable("institution");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.LawForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("lawform");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Settlements.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("SecondLevelRegionCode")
                        .HasColumnType("text")
                        .HasColumnName("secondlevelregioncode");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("district");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Code2")
                        .HasColumnType("text")
                        .HasColumnName("code2");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("MainSettlementCode")
                        .HasColumnType("text")
                        .HasColumnName("mainsettlementcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("municipality");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Settlements.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("text")
                        .HasColumnName("districtcode");

                    b.Property<string>("DistrictCode2")
                        .HasColumnType("text")
                        .HasColumnName("districtcode2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDistrict")
                        .HasColumnType("boolean")
                        .HasColumnName("isdistrict");

                    b.Property<string>("MayoraltyCode")
                        .HasColumnType("text")
                        .HasColumnName("mayoraltycode");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode");

                    b.Property<string>("MunicipalityCode2")
                        .HasColumnType("text")
                        .HasColumnName("municipalitycode2");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<string>("SettlementName")
                        .HasColumnType("text")
                        .HasColumnName("settlementname");

                    b.Property<string>("TypeCode")
                        .HasColumnType("text")
                        .HasColumnName("typecode");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("typename");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("settlement");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.SmartSpecializations.SmartSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CodeNumber")
                        .HasColumnType("text")
                        .HasColumnName("codenumber");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionAlt")
                        .HasColumnType("text")
                        .HasColumnName("descriptionalt");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasColumnType("text")
                        .HasColumnName("namealt");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentid");

                    b.Property<int?>("RootId")
                        .HasColumnType("integer")
                        .HasColumnName("rootid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("CodeNumber")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.ToTable("smartspecialization");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyid");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("integer")
                        .HasColumnName("companyuserid");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contractnumber");

                    b.Property<bool>("OfferingAdditionalPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("offeringadditionalpayment");

                    b.Property<string>("OfferingClarifications")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("offeringclarifications");

                    b.Property<int?>("OfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("offeringid");

                    b.Property<bool>("SecondOfferingAdditionalPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("secondofferingadditionalpayment");

                    b.Property<string>("SecondOfferingClarifications")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("secondofferingclarifications");

                    b.Property<int?>("SecondOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("secondofferingid");

                    b.Property<int?>("SecondSupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("secondsupplierid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("OfferingId");

                    b.HasIndex("SecondOfferingId");

                    b.HasIndex("SecondSupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("receivedvoucher");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("offeringid");

                    b.Property<int>("ReceivedVoucherId")
                        .HasColumnType("integer")
                        .HasColumnName("receivedvoucherid");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<string>("UserFullname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userfullname");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("ReceivedVoucherId");

                    b.HasIndex("SupplierId");

                    b.ToTable("receivedvouchercertificate");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificateFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("receivedvouchercertificatefile");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entityid");

                    b.Property<string>("FromFullname")
                        .HasColumnType("text")
                        .HasColumnName("fromfullname");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fromuserid");

                    b.Property<string>("FromUsername")
                        .HasColumnType("text")
                        .HasColumnName("fromusername");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("receivedvouchercommunication");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("receivedvoucherfile");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("companyid");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("integer")
                        .HasColumnName("companyuserid");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("contractdate");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("text")
                        .HasColumnName("contractnumber");

                    b.Property<bool>("OfferingAdditionalPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("offeringadditionalpayment");

                    b.Property<string>("OfferingClarifications")
                        .HasColumnType("text")
                        .HasColumnName("offeringclarifications");

                    b.Property<int?>("OfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("offeringid");

                    b.Property<int>("ReceivedVoucherId")
                        .HasColumnType("integer")
                        .HasColumnName("receivedvoucherid");

                    b.Property<bool>("SecondOfferingAdditionalPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("secondofferingadditionalpayment");

                    b.Property<string>("SecondOfferingClarifications")
                        .HasColumnType("text")
                        .HasColumnName("secondofferingclarifications");

                    b.Property<int?>("SecondOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("secondofferingid");

                    b.Property<int?>("SecondSupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("secondsupplierid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OfferingId");

                    b.HasIndex("ReceivedVoucherId");

                    b.HasIndex("SecondOfferingId");

                    b.HasIndex("SecondSupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("receivedvoucherhistory");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistoryFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("receivedvoucherhistoryfile");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChangedToState")
                        .HasColumnType("integer")
                        .HasColumnName("changedtostate");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entityid");

                    b.Property<string>("FromFullname")
                        .HasColumnType("text")
                        .HasColumnName("fromfullname");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fromuserid");

                    b.Property<string>("FromUserOrganization")
                        .HasColumnType("text")
                        .HasColumnName("fromuserorganization");

                    b.Property<string>("FromUsername")
                        .HasColumnType("text")
                        .HasColumnName("fromusername");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("touserid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("receivedvouchernotification");
                });

            modelBuilder.Entity("Sc.Models.Entities.SchemaVersions.SchemaVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Systemname")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updatedon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("schemaversions", (string)null);
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Junctions.SupplierOfferingEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SupplierEquipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierequipmentid");

                    b.Property<int>("SupplierOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierofferingid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SupplierEquipmentId");

                    b.HasIndex("SupplierOfferingId", "SupplierEquipmentId")
                        .IsUnique();

                    b.ToTable("supplierofferingequipment");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Junctions.SupplierOfferingSmartSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SmartSpecializationId")
                        .HasColumnType("integer")
                        .HasColumnName("smartspecializationid");

                    b.Property<int>("SupplierOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierofferingid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SmartSpecializationId");

                    b.HasIndex("SupplierOfferingId", "SmartSpecializationId")
                        .IsUnique();

                    b.ToTable("supplierofferingsmartspecialization");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Junctions.SupplierOfferingTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SupplierOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierofferingid");

                    b.Property<int>("SupplierTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierteamid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SupplierTeamId");

                    b.HasIndex("SupplierOfferingId", "SupplierTeamId")
                        .IsUnique();

                    b.ToTable("supplierofferingteam");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComplexId")
                        .HasColumnType("integer")
                        .HasColumnName("complexid");

                    b.Property<int?>("InstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplierequipment");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierEquipmentFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("supplierequipmentfile");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("districtid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer")
                        .HasColumnName("municipalityid");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("OfferingType")
                        .HasColumnType("integer")
                        .HasColumnName("offeringtype");

                    b.Property<int>("SettlementId")
                        .HasColumnType("integer")
                        .HasColumnName("settlementid");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("shortdescription");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.Property<string>("WebPageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("webpageurl");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplieroffering");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierOfferingCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Counter")
                        .HasColumnType("integer")
                        .HasColumnName("counter");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("supplierofferingcounter");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierOfferingFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DbId")
                        .HasColumnType("integer")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<int>("SupplierOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierofferingid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SupplierOfferingId");

                    b.ToTable("supplierofferingfile");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierRepresentative", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameAlt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("namealt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("supplierrepresentative");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicRankDegree")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("academicrankdegree");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middlename");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position");

                    b.Property<int?>("RasLotId")
                        .HasColumnType("integer")
                        .HasColumnName("raslotid");

                    b.Property<int?>("RasLotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("raslotnumber");

                    b.Property<string>("RasPortalUrl")
                        .HasColumnType("text")
                        .HasColumnName("rasportalurl");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId", "SupplierId")
                        .IsUnique();

                    b.ToTable("supplierteam");
                });

            modelBuilder.Entity("Sc.Models.Entities.VoucherRequests.VoucherRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying")
                        .HasColumnName("code")
                        .IsFixedLength();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("text")
                        .HasColumnName("declinereason");

                    b.Property<int>("RequestCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("requestcompanyid");

                    b.Property<int>("RequestUserId")
                        .HasColumnType("integer")
                        .HasColumnName("requestuserid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("SupplierOfferingId")
                        .HasColumnType("integer")
                        .HasColumnName("supplierofferingid");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RequestCompanyId");

                    b.HasIndex("SupplierOfferingId", "RequestCompanyId")
                        .IsUnique();

                    b.ToTable("voucherrequest");
                });

            modelBuilder.Entity("Sc.Models.Entities.VoucherRequests.VoucherRequestCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entityid");

                    b.Property<string>("FromFullname")
                        .HasColumnType("text")
                        .HasColumnName("fromfullname");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fromuserid");

                    b.Property<string>("FromUsername")
                        .HasColumnType("text")
                        .HasColumnName("fromusername");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("voucherrequestcommunication");
                });

            modelBuilder.Entity("Sc.Models.Entities.VoucherRequests.VoucherRequestNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChangedToState")
                        .HasColumnType("integer")
                        .HasColumnName("changedtostate");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entityid");

                    b.Property<string>("FromFullname")
                        .HasColumnType("text")
                        .HasColumnName("fromfullname");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fromuserid");

                    b.Property<string>("FromUserOrganization")
                        .HasColumnType("text")
                        .HasColumnName("fromuserorganization");

                    b.Property<string>("FromUsername")
                        .HasColumnType("text")
                        .HasColumnName("fromusername");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("touserid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("ViewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("voucherrequestnotification");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistration", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.ApproveRegistrations.ApproveRegistration", "ApproveRegistration")
                        .WithOne("File")
                        .HasForeignKey("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproveRegistration");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistory", b =>
                {
                    b.HasOne("Sc.Models.Entities.ApproveRegistrations.ApproveRegistration", null)
                        .WithMany("ApproveRegistrationHistories")
                        .HasForeignKey("ApproveRegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistoryFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistory", "ApproveRegistrationHistory")
                        .WithOne("File")
                        .HasForeignKey("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistoryFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApproveRegistrationHistory");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.Company", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Nomenclatures.LawForm", "LawForm")
                        .WithMany()
                        .HasForeignKey("LawFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("LawForm");

                    b.Navigation("Municipality");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.CompanyAdditional", b =>
                {
                    b.HasOne("Sc.Models.Entities.Companies.Company", "Company")
                        .WithOne("CompanyAdditional")
                        .HasForeignKey("Sc.Models.Entities.Companies.CompanyAdditional", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.CompanyRepresentative", b =>
                {
                    b.HasOne("Sc.Models.Entities.Companies.Company", "Company")
                        .WithOne("Representative")
                        .HasForeignKey("Sc.Models.Entities.Companies.CompanyRepresentative", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Complexes.Complex", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.District", "District")
                        .WithMany("Complexes")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Complexes.ComplexOrganization", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Complexes.Complex", null)
                        .WithMany("ComplexOrganizations")
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Institutions.Institution", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.District", "District")
                        .WithMany("Institutions")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Institutions.Institution", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Institutions.Institution", "Root")
                        .WithMany()
                        .HasForeignKey("RootId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Parent");

                    b.Navigation("Root");

                    b.Navigation("Settlement");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Settlements.Settlement", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.SmartSpecializations.SmartSpecialization", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.SmartSpecializations.SmartSpecialization", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.SmartSpecializations.SmartSpecialization", "Root")
                        .WithMany()
                        .HasForeignKey("RootId");

                    b.Navigation("Parent");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", b =>
                {
                    b.HasOne("Sc.Models.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId");

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "SecondOffering")
                        .WithMany()
                        .HasForeignKey("SecondOfferingId");

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "SecondSupplier")
                        .WithMany()
                        .HasForeignKey("SecondSupplierId");

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Company");

                    b.Navigation("Offering");

                    b.Navigation("SecondOffering");

                    b.Navigation("SecondSupplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificate", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ReceivedVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offering");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificateFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificate", "Certificate")
                        .WithOne("File")
                        .HasForeignKey("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificateFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCommunication", b =>
                {
                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", "ReceivedVoucher")
                        .WithOne("File")
                        .HasForeignKey("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceivedVoucher");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistory", b =>
                {
                    b.HasOne("Sc.Models.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId");

                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", null)
                        .WithMany("Histories")
                        .HasForeignKey("ReceivedVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "SecondOffering")
                        .WithMany()
                        .HasForeignKey("SecondOfferingId");

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "SecondSupplier")
                        .WithMany()
                        .HasForeignKey("SecondSupplierId");

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Company");

                    b.Navigation("Offering");

                    b.Navigation("SecondOffering");

                    b.Navigation("SecondSupplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistoryFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistory", "ReceivedVoucherHistory")
                        .WithOne("File")
                        .HasForeignKey("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistoryFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceivedVoucherHistory");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherNotification", b =>
                {
                    b.HasOne("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Junctions.SupplierOfferingEquipment", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierEquipment", "SupplierEquipment")
                        .WithMany("SupplierOfferingEquipment")
                        .HasForeignKey("SupplierEquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "SupplierOffering")
                        .WithMany("SupplierOfferingEquipment")
                        .HasForeignKey("SupplierOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupplierEquipment");

                    b.Navigation("SupplierOffering");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Junctions.SupplierOfferingSmartSpecialization", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.SmartSpecializations.SmartSpecialization", "SmartSpecialization")
                        .WithMany()
                        .HasForeignKey("SmartSpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "SupplierOffering")
                        .WithMany("SmartSpecializations")
                        .HasForeignKey("SupplierOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SmartSpecialization");

                    b.Navigation("SupplierOffering");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Junctions.SupplierOfferingTeam", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "SupplierOffering")
                        .WithMany("SupplierOfferingTeams")
                        .HasForeignKey("SupplierOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierTeam", "SupplierTeam")
                        .WithMany("SupplierOfferingTeams")
                        .HasForeignKey("SupplierTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupplierOffering");

                    b.Navigation("SupplierTeam");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Supplier", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Complexes.Complex", "Complex")
                        .WithMany("Suppliers")
                        .HasForeignKey("ComplexId");

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Institutions.Institution", "Institution")
                        .WithMany("Suppliers")
                        .HasForeignKey("InstitutionId");

                    b.Navigation("Complex");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierEquipment", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierEquipmentFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierEquipment", "Equipment")
                        .WithOne("File")
                        .HasForeignKey("Sc.Models.Entities.Suppliers.SupplierEquipmentFile", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierOffering", b =>
                {
                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Nomenclatures.Settlements.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany("SupplierOfferings")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Settlement");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierOfferingFile", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "Offering")
                        .WithMany("Files")
                        .HasForeignKey("SupplierOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierRepresentative", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithOne("Representative")
                        .HasForeignKey("Sc.Models.Entities.Suppliers.SupplierRepresentative", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierTeam", b =>
                {
                    b.HasOne("Sc.Models.Entities.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sc.Models.Entities.VoucherRequests.VoucherRequest", b =>
                {
                    b.HasOne("Sc.Models.Entities.Companies.Company", "RequestCompany")
                        .WithMany()
                        .HasForeignKey("RequestCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc.Models.Entities.Suppliers.SupplierOffering", "SupplierOffering")
                        .WithMany()
                        .HasForeignKey("SupplierOfferingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestCompany");

                    b.Navigation("SupplierOffering");
                });

            modelBuilder.Entity("Sc.Models.Entities.VoucherRequests.VoucherRequestCommunication", b =>
                {
                    b.HasOne("Sc.Models.Entities.VoucherRequests.VoucherRequest", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Sc.Models.Entities.VoucherRequests.VoucherRequestNotification", b =>
                {
                    b.HasOne("Sc.Models.Entities.VoucherRequests.VoucherRequest", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistration", b =>
                {
                    b.Navigation("ApproveRegistrationHistories");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Sc.Models.Entities.ApproveRegistrations.ApproveRegistrationHistory", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Sc.Models.Entities.Companies.Company", b =>
                {
                    b.Navigation("CompanyAdditional");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Complexes.Complex", b =>
                {
                    b.Navigation("ComplexOrganizations");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Institutions.Institution", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Sc.Models.Entities.Nomenclatures.Settlements.District", b =>
                {
                    b.Navigation("Complexes");

                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucher", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("File");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherCertificate", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Sc.Models.Entities.ReceivedVouchers.ReceivedVoucherHistory", b =>
                {
                    b.Navigation("File");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.Supplier", b =>
                {
                    b.Navigation("Representative");

                    b.Navigation("SupplierOfferings");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierEquipment", b =>
                {
                    b.Navigation("File");

                    b.Navigation("SupplierOfferingEquipment");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierOffering", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SmartSpecializations");

                    b.Navigation("SupplierOfferingEquipment");

                    b.Navigation("SupplierOfferingTeams");
                });

            modelBuilder.Entity("Sc.Models.Entities.Suppliers.SupplierTeam", b =>
                {
                    b.Navigation("SupplierOfferingTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
